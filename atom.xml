<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunrise</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunrisely.club/"/>
  <updated>2020-10-09T14:00:11.491Z</updated>
  <id>https://sunrisely.club/</id>
  
  <author>
    <name>sunrise</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>进一步的判断与循环</title>
    <link href="https://sunrisely.club/2020/10/08/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/"/>
    <id>https://sunrisely.club/2020/10/08/%E8%BF%9B%E4%B8%80%E6%AD%A5%E7%9A%84%E5%88%A4%E6%96%AD%E4%B8%8E%E5%BE%AA%E7%8E%AF/</id>
    <published>2020-10-08T03:47:01.000Z</published>
    <updated>2020-10-09T14:00:11.491Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font color='#ff9900'>逻辑类型和运算</font></strong></p><a id="more"></a><hr><h1 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h1><ul><li>首先需要调用头文件：<code>#include &lt;stdbool.h&gt;</code></li><li>之后就可以使用bool和true、false</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> b = <span class="number">6</span>&gt;<span class="number">5</span>;</span><br><span class="line"><span class="keyword">bool</span> t = <span class="literal">true</span>;</span><br><span class="line">t = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运算结果： <strong><font color='#ff9900'>1</font></strong></p><p>这个程序没有真正bool 量类型</p><p>没有特别的方式去输出bool量，只能得到1，不会是true</p><p>无法让printf 去判断 true 和 false  值</p><h1 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h1><ul><li>逻辑运算是对逻辑量进行的运算，结果只有 0 或 1</li><li>逻辑量是关系运算或逻辑运算的结果</li></ul><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">示例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center"><strong><font color='#2eb82e'>!</font></strong></td><td align="center"><strong>逻辑非</strong></td><td align="center"><strong><font color='#000000'>  !a  </font></strong></td><td align="center"><strong><font color='#ff9900'>   如果a是true结果就是false，如果a是false结果就是true  </font></strong></td></tr><tr><td align="center"><strong><font color='#2eb82e'>&amp;&amp;</font></strong></td><td align="center"><strong>逻辑与</strong></td><td align="center"><strong><font color='#000000'> a &amp;&amp; b </font></strong></td><td align="center"><strong><font color='#ff9900'>    如果a和b都是true，结果就是true；否则就是false    </font></strong></td></tr><tr><td align="center"><strong><font color='#2eb82e'> || </font></strong></td><td align="center"><strong>逻辑或</strong></td><td align="center"><strong><font color='#000000'>a || b </font></strong></td><td align="center"><strong><font color='#ff9900'> 如果a和b有一个是true，结果为true；两个都是false，结果为false</font></strong></td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li>如果要表达数学中的区间，如：<code>x ∈(4,6)</code> 或 <code>x ∈ [4,6]</code>,应该如何写C的表达式？</li></ul><p>错误：</p><p> <code>4 &lt; x &lt; 6</code></p><p>像 <code>4 &lt; x &lt; 6</code>这样的式子，不是C能正确计算的式子，只是能编译的式子，但意思不一样</p><p>是 4 先判断 是不是 &lt; x ，得到的结果 0 或者 1</p><p>再看  0 或者 1 是否 &lt; 6 ，既然结果只有 0 或者 1</p><p>无论 0 或者 1 都是 &lt; 6 的 </p><p>所以这个式子的结果怎么都是1</p><p>不可能去判断 x 是不是在 4 和 6 之间</p><p>因为 4 &lt; x 的结果是一个逻辑值 (0或1) </p><p><strong>正确</strong>：<strong><font color='#ff9900'>x &gt; 4 &amp;&amp; x &lt; 6 </font></strong></p><hr><ul><li>如何判断一个字符c是否是大写字母？</li></ul><p><strong><font color='#ff9900'>c &gt;= ‘ A ‘ &amp;&amp; c &lt;= ‘ Z ‘</font></strong></p><p>  理解示例：</p><ul><li><code>age &gt; 20 &amp;&amp; age &lt; 30</code></li></ul><p>age 处于20 到 30 中间 ，并且两头都不包含</p><ul><li><code>index &lt; 0 || index &gt; 99</code></li></ul><p>index 不在 0 – 99的范围内，小于0或者大于99</p><ul><li><code>! age &lt; 20</code></li></ul><p>这两面有两个运算符，虽然逻辑运算符要低于比较运算符，但可是! 是单目运算符，还有另一条规则，单目运算符要高于双目运算符。</p><p>表面上看，是age &lt; 20 的反面那就是，age &gt;= 20 ，</p><p>但 ! 会先做和age结合在一起，如果age 是0 ，那么!age就会变成1，如果age 不是0，!age会变成0，再去和20 作比较，因为这个的结果不是0就是1，和&lt;20去做比较话，那整个表达式永远都会是1</p><p>如果要做到age不是 &lt; 20 ，给 age 加括号 ()</p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>三个运算符优先级是各不相同</p><ul><li><code>! &gt; &amp;&amp; &gt; ||</code></li><li><code>!done &amp;&amp; (count &gt; MAX)</code> </li></ul><p>! 优先级最高，会先算</p><p>&amp; 后面有括号，其实可以不必要有，如果 <code>count &gt; MAX</code>并且 <code>done</code> 是 0 ，整个结果才会是 1</p><table><thead><tr><th align="center">优先级</th><th align="center">运算符</th><th align="center">结合性</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">（）</td><td align="center">从左到右</td></tr><tr><td align="center">2</td><td align="center">！，+ ，- ，++ ，–</td><td align="center">从右到左（单目的+和 - ）</td></tr><tr><td align="center">3</td><td align="center">*，/，%</td><td align="center">从左到右</td></tr><tr><td align="center">4</td><td align="center">+ ，-</td><td align="center">从左到右</td></tr><tr><td align="center">5</td><td align="center">&lt; ，&lt;=， &gt; ，&gt;=</td><td align="center">从左到右</td></tr><tr><td align="center">6</td><td align="center">==，!=</td><td align="center">从左到右</td></tr><tr><td align="center">7</td><td align="center">&amp;&amp;</td><td align="center">从左到右</td></tr><tr><td align="center">8</td><td align="center">||</td><td align="center">从左到右</td></tr><tr><td align="center">9</td><td align="center">=，+=，-=，*=，/=，%=</td><td align="center">从右到左</td></tr></tbody></table><hr><p>替换成逻辑运算的式子</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/%E5%9B%BE%E6%80%AA%E5%85%BD_6513f7a0f8351e2581b856763d02a4b6_37623.png" alt="图怪兽_6513f7a0f8351e2581b856763d02a4b6_37623"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(i! = j &amp;&amp; i!=k &amp;&amp; j!=k)</span><br></pre></td></tr></table></figure><h3 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h3><p>单目运算是指运算符包括<a href="https://baike.baidu.com/item/赋值运算符/2482721" target="_blank" rel="noopener">赋值运算符</a>、算术运算符、<a href="https://baike.baidu.com/item/逻辑运算符/4123505" target="_blank" rel="noopener">逻辑运算符</a>、位逻辑运算符、位移运算符、<a href="https://baike.baidu.com/item/关系运算符/352774" target="_blank" rel="noopener">关系运算符</a>、自增自减运算符。</p><p>单目操作符 也就是只接受一个操作数的操作符</p><p>包括 ! ,++,sizeof ,~,–,(type)</p><p>在运算优先级里位第二位。</p><h3 id="双目运算符"><a href="#双目运算符" class="headerlink" title="双目运算符"></a>双目运算符</h3><p>运算所需变量为两个的运算符叫做双目运算符，或者要求运算对象的个数是2的运算符称为双目运算符。</p><p><strong><font color='#ff9900'>点击查看详细</font></strong><a href="https://baike.baidu.com/item/%E5%8F%8C%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6/6082535?fr=aladdin" target="_blank" rel="noopener">双目运算符</a></p><h1 id="短路"><a href="#短路" class="headerlink" title="短路"></a>短路</h1><p>逻辑运算是自左向右进行的，如果左边的结果已经能够决定结果了，就不会做右边的计算</p><ul><li>a == 6  &amp;&amp;  b==1</li><li>a == 6  &amp;&amp;  b+=1</li></ul><p>如果 a==6 不成立b==1 就不会去算了</p><p>如果要是右边进行了赋值，需要产生一些结果，所以</p><ul><li>对于&amp;&amp;，左边是false时就不做右边了</li><li>对于||，左边是true 时就不做右边了</li></ul><p>这称为短路 </p><p>所以不要把：<strong><font color='#ff9900'>不要把赋值，包括复合赋值组合进表达式！</font></strong></p><h1 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h1><ul><li>count = (count &gt; 20) ? count -10 : count + 10;</li><li>条件、条件满足时的值和条件不满足时的值</li></ul><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( count &gt; <span class="number">20</span> )</span><br><span class="line">count = count<span class="number">-10</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">count = count+<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>复杂的情况下会带来很大麻烦 </p><p>优先级</p><ul><li>条件运算符的优先级高于赋值运算符，但是低于其他运算符</li></ul><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20201009152504884.png" alt="image-20201009152504884"></p><p>嵌套条件表达式</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20201009152648569.png" alt="image-20201009152648569"></p><p>我们在理解这个东西怎么计算，把所有分支部分算明白</p><p>然后再回到总的地方</p><p>所以最好不要使用嵌套的条件表达式，使得程序变得复杂，让别人来理解你的程序太困难</p><h2 id="逗号运算"><a href="#逗号运算" class="headerlink" title="逗号运算"></a>逗号运算</h2><ul><li>逗号用来连接两个表达式，并以其右边的表达式的值作为它的结果。逗号的优先级是所有的运算符中最低的，所以它两边的表达式会先计算；都好的组合关系是自左向右，所以左边的表达式会先计算，二右边的表达式的值就留下来作为逗号运算的结果。</li></ul><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">i = <span class="number">3</span>+<span class="number">4</span>, <span class="number">5</span>+<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">pritnf(<span class="string">"%d/n"</span>,i);</span><br></pre></td></tr></table></figure><p>运行结果，会提示没有用到 5+6</p><p>因为 3+4 被赋值给了 i ，<code>i= 3+4</code>这是一个表达式</p><p>赋值优先级比 ， 要来的高，所以 <code>i= 3+4</code> 会先算</p><p>然后再去算5+6 ，但是没有交给任何人，表达式的结果没有用到。</p><p>如果：</p><p><code>i =( 3+4, 5+6 );</code></p><p>加了一个括号提升了优先级，但会提示 3+4 没有用到</p><p>最后运行结果 11</p><p>表示是 逗号后的运算结果，去赋值给了 i</p><hr><p>逗号的作用，主要是在for中使用</p><p><code>for ( i=0, j=10; i&lt;j ;i++, j-- )</code></p><p>其中有三个表达式，想要在里面放多个计算时候，就可以使用逗号</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;font color=&#39;#ff9900&#39;&gt;逻辑类型和运算&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>循环的计算和选择</title>
    <link href="https://sunrisely.club/2020/09/27/%E5%BE%AA%E7%8E%AF%E7%9A%84%E8%AE%A1%E7%AE%97%E5%92%8C%E9%80%89%E6%8B%A9/"/>
    <id>https://sunrisely.club/2020/09/27/%E5%BE%AA%E7%8E%AF%E7%9A%84%E8%AE%A1%E7%AE%97%E5%92%8C%E9%80%89%E6%8B%A9/</id>
    <published>2020-09-27T15:17:09.000Z</published>
    <updated>2020-10-06T05:56:58.192Z</updated>
    
    <content type="html"><![CDATA[<p>循环的计算和选择，小总结。</p><a id="more"></a><p>循环次数</p><ul><li>for (i = 0, i &lt; n ;i++)</li><li>则循环的次数是 n, 而循环结束以后，i 的值是 n。循环的控制变量 i ，是选择从 0 开始还是从 1 开始，是判断 i &lt; n 还是判断 i &lt;= n ,对循环的次数，循环结束后变量的值都有影响。</li></ul><p>第一种结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;<span class="number">5</span>;i++ ) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i = %d "</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n最后i=%d\n"</span>,i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>i = 0; i = 1; i = 2; i = 3; i = 4</p><p>最后 i = 5</p><p>循环 <strong><font color='#2eb82e'>5 </font></strong>次，但是从<strong><font color='#2eb82e'> 0 </font></strong>开始</p><hr><p>第二种结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i=<span class="number">1</span>; i&lt;<span class="number">5</span>;i++ ) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i = %d "</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n最后i=%d\n"</span>,i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>i = 1; i = 2; i = 3; i = 4; i = 5</p><p>最后 i = 6</p><p>循环<strong><font color='#2eb82e'> 5 </font></strong>次，是从<strong><font color='#2eb82e'> 1 </font></strong>开始</p><hr><p><code>for == while</code></p><p>其实 <strong><font color='#ff9900'>for</font></strong> 和<strong><font color='#ff9900'> while </font></strong>是等价的</p><p>如下列式子：</p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200927234959440.png" alt="image-20200927234959440" style="zoom:80%;" /><p>都是先做一个初始化，然后进行判断，再进入循环，在做第三个表达式 i++ 然后回来重新判断是否满足。什么时候条件不满足，就离开循环。</p><p>所以任意一个<strong><font color='#ff9900'>for </font></strong>循环都会被改为 <strong><font color='#ff9900'>while </font></strong>循环</p><p>比如把<strong><font color='#ff9900'> for  </font></strong>中的初始化表达式 放在前面</p><p>把条件判断放到<strong><font color='#ff9900'> while </font></strong>条件判断里</p><p>把每一步要做的动作，放到循环体内</p><hr><p>for循环</p><p>for （初始动作；条件；每轮的动作）｛</p><p>｝</p><ul><li>for 中的每一个表达式都是可以省略的 for （;条件;）== while ( 条件 )</li></ul><hr><p>三种循环：</p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200927235937954.png" alt="image-20200927235937954" style="zoom:80%;" /><p><strong>当选择问题时候，选择哪个循环</strong></p><p><strong><font color='#ff9900'>Tips for loops </font></strong></p><ul><li>如果有固定次数，例如阶乘：用<strong><font color='#ff9900'> for </font></strong></li><li>如果必须执行一次，用 <strong><font color='#ff9900'>do_while </font></strong></li><li>其他情况用<strong><font color='#ff9900'> while </font></strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;循环的计算和选择，小总结。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>循环-for</title>
    <link href="https://sunrisely.club/2020/09/19/%E5%BE%AA%E7%8E%AF-for/"/>
    <id>https://sunrisely.club/2020/09/19/%E5%BE%AA%E7%8E%AF-for/</id>
    <published>2020-09-19T03:15:56.000Z</published>
    <updated>2020-09-27T14:52:11.910Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇<strong><font color='#ff9900'> &lt;循环-for&gt; </font></strong></p><a id="more"></a><hr><h1 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h1><p>for循环像一个计数循环：设定一个计数器，初始化它，然后再计数器到达某值之前，重复执行循环体，而每执行一轮循环，计数器值以一定步进进行调整，比如加1或者减1。</p><p>for (count =10 ; count &gt; 0; count– )</p><p>就读成 ：“对弈一开始的count = 10，当count &gt; 0 时，重复做循环体， 每一轮循环在做完循环体内语句后，使得count– 。 ”</p><hr><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>阶乘：</p><p>n ! =1 x 2 x 3 x 4 x … x n</p><p>写一个程序，让用户输入n ,然后计算输出 n ! </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> fact = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++ )&#123;</span><br><span class="line">fact *= i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d! = %d\n"</span>, n, fact);</span><br></pre></td></tr></table></figure><p>变量：</p><p>显然读用户的输入需要一个 int 的 n ,然后计算的结果需要用一个变量保存，可以是 int 的<code>factor</code> ，在计算中需要有一个变量不断地从 1 递增到 n , 那可以是 int 的 i 。</p><p>解析：</p><p><code>for ( )</code> 中 ：</p><ul><li><p>第 <strong><font color='#ff9900'>一</font></strong> 个表达式代表 —— <strong><font color='#ff9900'>初始动作</font></strong></p></li><li><p>第 <strong><font color='#ff9900'>二</font></strong> 个表达式代表 ——  <strong><font color='#ff9900'>循环继续的条件</font></strong></p></li><li><p>第 <strong><font color='#ff9900'>三</font></strong> 个表达式代表 —— <strong><font color='#ff9900'>循环每轮要做的条件</font></strong></p></li></ul><p>为什么初始值为 0 ；</p><p>做求和的程序时，记录结果的变量应该初始化为<strong><font color='#2eb82e'> 0 </font></strong>，而做求积的变量时，记录结果的变量应该初始化为<strong><font color='#2eb82e'> 1 </font></strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一篇&lt;strong&gt;&lt;font color=&#39;#ff9900&#39;&gt; &amp;lt;循环-for&amp;gt; &lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>循环-while</title>
    <link href="https://sunrisely.club/2020/09/16/%E5%BE%AA%E7%8E%AF-while/"/>
    <id>https://sunrisely.club/2020/09/16/%E5%BE%AA%E7%8E%AF-while/</id>
    <published>2020-09-16T02:15:27.000Z</published>
    <updated>2020-09-24T13:59:43.618Z</updated>
    
    <content type="html"><![CDATA[<p>这一篇<strong><font color='#ff9900'> &lt;循环&gt; </font></strong></p><a id="more"></a><hr><h1 id="while-循环"><a href="#while-循环" class="headerlink" title="while-循环"></a>while-循环</h1><p>循环语句可以在满足条件时，不断地重复执行一些动作。</p><p><strong><font color='#ff9900'>if 和 while 的区别</font></strong></p><ul><li>if 是一次性的。条件满足或者不满足时，做完一次都会离开。</li><li>while 条件满足还会做，不满足时就会离开。</li></ul><p>while语句是一个循环语句，它会首先判断一个条件是否满足，如果条件满足，则执行后面紧跟着的语句或语句括号，然后再次判断条件是否满足，如果条件满足则再次执行，直到条件不满足为止。后面紧跟的语句或语句括号，就是 <strong><font color='#ff9900'>循环体 。</font></strong></p><p><strong><font color="#ff9900">{   }</font></strong> 内的叫循环体。</p><p>注意：</p><p>循环体内要有改变条件的机会，不然会死循环出不来。程序运行超时</p><hr><p> <strong><font color='#ff9900'>while 循环 </font></strong></p><ul><li>如果我们把while翻译作 “ 当 ” ，那么一个while循环的意思就是: 当条件满足时，不断地蠢重复循环体内的语句。</li><li>循环执行之前判断是否继续循环，所以有可能循环一次也没用被执行。</li></ul><hr><p>这是如果一直使用 if 去判断，这个数字有多少位数</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200916104657763.png" alt="image-20200916104657763"></p><p>如果这样做，虽然也能判断出来。但会非常复杂，繁琐，所以就要用到 <strong><font color='#ff9900'>while</font></strong></p><hr><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>判断数字，有多少位数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">n++;</span><br><span class="line">x /=<span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">n++;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：</p><p>这个程序使用了 <strong><font color="#8fd3f4"> while</font></strong> 循环</p><p>假设 x = 4567</p><p>n++ = 1</p><p>4567 / 10 = 456</p><p>进入 while 循环，进行判断，</p><p>456 还 &gt; 0 , 继续取余，成为  45 &gt; 0 ,n++ = 2 。</p><p>直到 x &lt; 0 ,达成条件，退出循环。</p><p>每取余一次，n也会记录 +1 +1 +1。</p><p>最后输出结果：</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200916114216390.png" alt="image-20200916114216390"></p><hr><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><hr><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200916171921248.png" alt="image-20200916171921248"></p><p><code>n++ ;</code></p><p><code>x /= 10;</code></p><p>这一段代码，循环内还出现了一次，所以更改为第二则 代码</p><p>不使用计算机的情况下 来判断会不会成功运行，和预期结果一样。</p><ul><li>人脑模拟计算机的运行，在纸上列出所有的变量，随着程序的进展不断重新计算变量的值。当程序运行结束时，留在表格最下面的就是程序的最终结果。</li></ul><p>在纸上运行的结果：</p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/ere.png" alt="ere" style="zoom:67%;" /><h2 id="添加printf"><a href="#添加printf" class="headerlink" title="添加printf"></a>添加printf</h2><p>调试：</p><p>还可以在合适的地方加<code>printf</code>  ,作为调试手段</p><p>因为有时候 开不出 <code>debug</code> ，开不出复杂交互东西的时候</p><p>就采用这样一些手段，输出一些句子，比如：</p><ul><li>程序运行到哪</li><li>程序运行的时候里面的变量是什么样</li></ul><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">3</span></span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">n++;</span><br><span class="line">x /= <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"x=%d,n=%d\n"</span>,x ,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><code>x = 0 ,n = 1</code></p><p><code>1</code></p><p><code>3 / 10 =0 ,n = 1</code> ,这就是会输出运行结果</p><p>如果 <code>x = 0;</code></p><p>就不会有 <code>printf(&quot;x=%d,n=%d\n&quot;,x ,n);</code> 这句的输出，</p><p>因为 x 已经= 0  ,就不会进入循环，不会有后续<code>printf</code>的输出</p><p><strong><font color='#ff9900'>方便调试的小手段。</font></strong></p><hr><h1 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do-while 循环"></a>do-while 循环</h1><hr><p><strong><font color='#ff9900'>do-while</font></strong> 在进入循环的时候不做检查，而是在执行完一轮循环体的代码之后，再来检查循环的条件是否满足，如果满足则继续下一轮循环，不满足则结束循环。</p><hr><p>do-while 循环结构：</p> <img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200924163325930.png" alt="image-20200924163325930" style="zoom:80%;" /><hr><h2 id="示例：数位数的算法"><a href="#示例：数位数的算法" class="headerlink" title="示例：数位数的算法"></a>示例：数位数的算法</h2><ol><li>用户输入 x ;</li><li>初始化 n 为 0 ；</li><li>x = x / 10 ,去掉个位；</li><li>n++;</li><li>如果 x &gt; 0, 回到 3 ；</li><li>否则 n 就是结果。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d, &amp;x"</span>);</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">x/= <span class="number">10</span>;</span><br><span class="line">n ++;</span><br><span class="line">&#125; <span class="keyword">while</span> (x &gt; <span class="number">0</span> );</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,n);</span><br></pre></td></tr></table></figure><p>解析：</p><p>do {} 里面的句子，无论如何都是需要做的</p><p>例如 x = 345</p><p>先做一遍do语句中的， 345/10 = 34 ，n = 1</p><p>进入while 中，发现条件满足，再进入do循环体内</p><p>45/10 = 3 ,n =2  ,条件满足，再次进入</p><p>5/10 = 0 , n =3 ，条件不满，退出循环</p><p><strong><font color='#ff9900'>注意while语句后，接分号 ：</font></strong></p><hr><h1 id="两种循环的区别"><a href="#两种循环的区别" class="headerlink" title="两种循环的区别"></a>两种循环的区别</h1><hr><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200924163759063.png" alt="image-20200924163759063" style="zoom:80%;" /><ul><li>do-while 循环和while循环很像，区别是在<strong><font color='#ff9900'>循环体执行结束的时候才来判断条件。</font></strong>也就是说，无论如何，循环都会执行至少一遍，然后再来判断条件。</li><li>与while循环相同的是，条件满足时执行循环，条件不满足时结束循环。</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一篇&lt;strong&gt;&lt;font color=&#39;#ff9900&#39;&gt; &amp;lt;循环&amp;gt; &lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>判断-if</title>
    <link href="https://sunrisely.club/2020/09/15/%E5%88%A4%E6%96%AD-if/"/>
    <id>https://sunrisely.club/2020/09/15/%E5%88%A4%E6%96%AD-if/</id>
    <published>2020-09-15T02:10:16.000Z</published>
    <updated>2020-09-16T01:42:18.979Z</updated>
    
    <content type="html"><![CDATA[<p>我来一步一步整理前面所学，回顾。</p><p>这一篇讲 if  语句，后面要用 { }  的原因。</p><a id="more"></a><hr><h1 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h1><p>if语句可以判断条件是否满足，满足时才做相应的动作。</p><p>一个基本的if语句由一个关键字if开头，跟上在括号里的一个表示条件的逻辑表达式，然后是一对大括号”{}”之间的若干条语句。如果表示条件的逻辑表达式的结果不是零，那么就执行后面跟着的这对大括号中的语句，否则就跳过这些语句不执行，而继续下面的其他语句</p><p><code>if(total &gt; amount)</code></p><p>​        <code>total += amount+ 1 0;</code></p><p>if语句中，圆括号中有表达式，如果这个表达式的计算结果不是0，那么条件成立。就还会继续做后面 大括号的语句。如果条件不成立，就会跳过。</p><p>if语句还有种形式，if后面没有大括号的时候，紧跟着if后面那一句，就会成为条件要执行的那句话。</p><p><code>if ( total &gt; amount )</code></p><p>​        <code>total += amount+ 10;</code></p><p>在if语句的圆括号后面，要么是有一对大括号，要么跟着一句一句。不能在<code>if ( total &gt; amount )</code>语句后直接 加 ;  只有和 <code>total += amount+ 10;</code> 连在一起，才是整个 <strong><font color='#ff9900'>if</font></strong> 语句。</p><p><strong><font color='#ff9900'>if语句拥有和控制这条赋值语句，决定它是否要被执行。</font></strong></p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/091510354633_0image-20200915103219770.png" alt="091510354633_0image-20200915103219770"></p><hr><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><h2 id="计算薪水"><a href="#计算薪水" class="headerlink" title="计算薪水"></a>计算薪水</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> RATE = <span class="number">8.25</span>;  </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> STANDARD = <span class="number">40</span>;   </span><br><span class="line"><span class="keyword">double</span> pay = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">int</span> hours;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入工作的小时数: "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;hours);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (hours &gt; STANDARD)</span><br><span class="line">   pay = STANDARD * RATE + </span><br><span class="line">   (hours-STANDARD) * (RATE * <span class="number">1.5</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   pay = hours * RATE;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"应付工资: %f\n"</span>, pay);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这则程序没有使用大括号</p><p><code>else</code><br>           <code>pay = hours * RATE;</code> </p><p>后面打了 ; 表明这则判断语句结束。</p><p>程序判断完 输出: <code>printf(&quot;应付工资: %f\n&quot;, pay);</code></p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200915110417562.png" alt=""></p><h2 id="判断成绩"><a href="#判断成绩" class="headerlink" title="判断成绩"></a>判断成绩</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PASS=<span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入成绩: "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;score);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"你输入的成绩是%d.\n"</span>, score);</span><br><span class="line"><span class="keyword">if</span> ( score &lt; PASS )</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"很遗憾，这个成绩没有及格。"</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"祝贺你，这个成绩及格了。"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"再见\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这则程序 <code>else</code> 添加 { }  包括了两个条件</p><p><code>printf(&quot;祝贺你，这个成绩及格了。&quot;);</code><br>        <code>printf(&quot;再见\n&quot;);</code></p><p>运行结果：</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/4.png" alt="4"></p><p>如果  <code>printf(&quot;再见\n&quot;);</code>   在 else 的括号外，</p><p>那就是 不及格也会显示 再见</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200915111719796.png" alt="image-20200915111719796"></p><p>这就是 在判断语句中 { } 里和 { } 外的区别。</p><hr><h1 id="为什么强调if和else后面要用"><a href="#为什么强调if和else后面要用" class="headerlink" title="为什么强调if和else后面要用{}"></a>为什么强调if和else后面要用{}</h1><ul><li><strong><font color='#ff9900'>有大括号语句执行括号内的所有语句，没有括号则只执行一条语句。</font></strong></li><li><strong><font color='#ff9900'>方便阅读容易找到所属关系。</font></strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我来一步一步整理前面所学，回顾。&lt;/p&gt;
&lt;p&gt;这一篇讲 if  语句，后面要用 { }  的原因。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>判断</title>
    <link href="https://sunrisely.club/2020/09/08/%E5%88%A4%E6%96%AD/"/>
    <id>https://sunrisely.club/2020/09/08/%E5%88%A4%E6%96%AD/</id>
    <published>2020-09-07T16:36:28.000Z</published>
    <updated>2020-09-16T01:48:06.107Z</updated>
    
    <content type="html"><![CDATA[<p>有点久没更新博文了，现在来从前往后梳理一遍</p><p>这一篇<strong><font color='#ff9900'> &lt;判断与循环&gt; </font></strong></p><a id="more"></a><p>今天半夜补的，有点乱，大概先写出来，之后重新排版一遍</p><p>9-10 更新 写到了9-11了。。。</p><hr><p>如果(im小于0)，那么</p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200908004317241.png" alt="image-20200908004317241" style="zoom: 50%;" /><p>计算两个值之间的关系，所以叫做关系运算</p><p>我靠 图发不出来</p><p>标记一下 ，明天补上</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>当两个值得关系符合关系运算符的预期时，关系运算的结果为整数1，否则为整数0；</p><p>所有的关系运算符的优先级比算数运算的低，但是比赋值运算的高</p><p>运算符的优先级比算术运算的低，但是比赋值运算的高</p><ul><li>7&gt;= 3 + 4</li><li>int r = a&gt; 0;</li></ul><p>如果不是 a&gt;0 ，赋值 int r = a ,去做&gt;0 的运算，那没有任何意义。</p><p>只有 a &gt; 0 的计算结果，拿来赋值给 r 作为初值</p><p>优先级</p><p>判断是否相等的==和!=的优先级比其他的低，而连续的关系运算是从左到右进行的</p><h3 id="两个循环程序"><a href="#两个循环程序" class="headerlink" title="两个循环程序"></a>两个循环程序</h3><p>循环中的一些：</p><p>没太官方，我的通俗</p><p><code>if</code> 相当于如果</p><p><code>else</code> = 否则的话</p><h2 id="零钱机-使用循环的方式判断"><a href="#零钱机-使用循环的方式判断" class="headerlink" title="零钱机-使用循环的方式判断"></a>零钱机-使用循环的方式判断</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">int</span> price = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bill = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//读入金额和票面</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入金额："</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;price);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入票面: "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;bill);</span><br><span class="line"><span class="comment">//计算找零</span></span><br><span class="line"><span class="keyword">if</span> ( bill &gt;= price )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"应该找您: %d\n"</span>, bill - price);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"你的钱不够\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>解析：</p><p><code>bill &gt;= price</code> </p><p>票面比金额大 就会计算找零，如果票面不够大。</p><p>就会进入下一阶段 进行判定，否则的话，就会提示钱不够</p><p>很简单的一个小程序</p><hr><h2 id="比较数的大小"><a href="#比较数的大小" class="headerlink" title="比较数的大小"></a>比较数的大小</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入两个整数: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a, &amp;b);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( a &gt; b ) &#123;</span><br><span class="line">    <span class="built_in">max</span> = a ;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">max</span> = b;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"大的那个是 %d\n"</span>, <span class="built_in">max</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入两个整数: "</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a, &amp;b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span> = b;</span><br><span class="line"><span class="keyword">if</span> ( a &gt; b ) &#123;</span><br><span class="line">    <span class="built_in">max</span> =a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"大的那个是%d\n"</span>, <span class="built_in">max</span>);</span><br></pre></td></tr></table></figure><p>解析：</p><p>两段代码结果都一样的</p><p>第一段 没啥说的</p><p>第二段：聪明一些</p><p>直接 max = b</p><p>然后进行判断</p><p>如果 a &gt; b 就直接  max = a</p><p>反之 b &gt; a 最先定义的max = b ,直接就是结果</p><p>下面这个是</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200911235736101.png" alt="image-20200911235736101"></p><p>有错误的示例</p><p>的确，傻的代码能让更多的人看懂的才是好代码</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有点久没更新博文了，现在来从前往后梳理一遍&lt;/p&gt;
&lt;p&gt;这一篇&lt;strong&gt;&lt;font color=&#39;#ff9900&#39;&gt; &amp;lt;判断与循环&amp;gt; &lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>表达式</title>
    <link href="https://sunrisely.club/2020/06/18/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://sunrisely.club/2020/06/18/%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-06-18T02:32:23.000Z</published>
    <updated>2020-08-04T14:28:03.246Z</updated>
    
    <content type="html"><![CDATA[<p>表达式，运算符的关系，以及<strong><font color='#ff9900'><code>i++</code></font></strong>和<strong><font color='#ff9900'><code>i--</code></font></strong> 的理解。</p><a id="more"></a><h1 id="表达式："><a href="#表达式：" class="headerlink" title="表达式："></a><strong>表达式：</strong></h1><p>一个表达式是一系列运算符和算子的组合，用来计算一个值</p><ul><li>运算符是指进行运算的动作，比如加法运算符“+” ，减法运算符“-” 。</li><li>算子是指参与运算的值，这个值可能是常数，也可能是变量，还可能是一个方法的返回值。</li></ul><p><strong>运算符：</strong></p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200621184041731.png" alt="image-20200621184041731" style="zoom: 50%;" /><p><strong>运算符优先级：</strong></p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/2.png" alt="2" style="zoom:50%;" /><p><strong>赋值运算符：</strong></p><ul><li>赋值也是运算，也有结果</li><li>a=6的结果是a被赋予的值，也就是6</li><li>a=b=6 <strong>→</strong> a=(b=6)</li></ul><p>复合赋值：</p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200621185118718.png" alt="image-20200621185118718" style="zoom: 33%;" /><p>递增递减运算符：</p><ul><li>“++”和“–”是两个和特殊的运算符， 他们是单目运算符，这个算子还必须是变量。</li><li>这两个运算符分别叫做递增和递减运算符，他们的作用就是给这个变量+1或者-1。</li><li>count++ ；</li><li>count + = 1；</li><li>count = count + 1；</li></ul><p><strong>前缀后缀：</strong></p><ul><li>++和– 可以放在变量的前面，叫做前缀形式，也可以放在变量的后面，叫做后缀形式。</li><li>a++的值是a加1以前的值，而++a的值是加了1以后的值，无论哪个，a自己的值都加了1了。<img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/5.png" alt="5" style="zoom:44%;" /></li></ul><p>++–：</p><p>可以单独使用，但是不要组合进表达式</p><p>个人理解：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">14</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i++=%d\n"</span>,i=i++);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"++i=%d"</span>,i=++i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的运行结果是：</p><p>i++ = 14</p><p>++i = 15</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">14</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t1 = a++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t2 = ++a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i++=%d\n"</span>,t1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"++i=%d"</span>,t2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>i++ = 14;</p><p>++i = 16;</p><p>这两个式子的结果不同的原因是：</p><ol><li>对于普通独立的语句，i++和++i是一样的，如：</li></ol><p>​    i++; 等效于i=i+1;</p><p>​    ++i; 等效于i=i+1;</p><ol start="2"><li><p>用于赋值语句，i++先赋值后加1，++i先加1后赋值，如：</p><p>   i=1; y=i++;  等效于：i=1; y=i; i=i+1; 则执行完后 y=1; i=2;</p><p>   i=1; y=++i;  等效于：i=1; i=i+1; y=i; 则执行完后 y=2; i=2;</p></li></ol><p>第一个式子中，是直接求出++i 所以是++i=14 + 1</p><p>第二个式子中，是提前经过定义变量，所以算t2的时候 i++=15后，又进行++i=15+1 =16</p><p>所以 t2=16</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;表达式，运算符的关系，以及&lt;strong&gt;&lt;font color=&#39;#ff9900&#39;&gt;&lt;code&gt;i++&lt;/code&gt;&lt;/font&gt;&lt;/strong&gt;和&lt;strong&gt;&lt;font color=&#39;#ff9900&#39;&gt;&lt;code&gt;i--&lt;/code&gt;&lt;/font&gt;&lt;/strong&gt; 的理解。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>练习题（逆序的三位数）</title>
    <link href="https://sunrisely.club/2020/06/17/%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://sunrisely.club/2020/06/17/%E7%BB%83%E4%B9%A0%E9%A2%98/</id>
    <published>2020-06-17T04:55:24.000Z</published>
    <updated>2020-06-18T09:44:38.157Z</updated>
    
    <content type="html"><![CDATA[<p>这个题目我不会，会了之后详解一下。</p><p>程序每次读入一个正三位数，然后输出逆序的数字。</p><p>如321    123</p><a id="more"></a><hr><h1 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h1><p>逆序的三位数：</p><p>程序每次读入一个正三位数，然后输出逆序的数字。注意，当输入的数字含有结尾的0时，输出不应带有前导的0。比如输入700，输出应该是7。</p><p>提示：用%10可以得到个位数，用/100可以得到百位数…。将这样得到的三个数字合起来：百位<em>100+十位</em>10+个位，就得到了结果。</p><p><strong><em>注意：除了题目要求的输出，不能输出任何其他内容，比如输入时的提示，输出时的说明等等都不能。这道题目要求输出逆序的数字，程序就只能输出这个数字，除此之外任何内容都不能输出。</em></strong></p><p><strong>输入格式:</strong></p><p>每个测试是一个3位的正整数。</p><p><strong>输出格式：</strong></p><p>输出逆序的数。</p><p><strong>输入样例：</strong></p><p>123</p><p><strong>输出样例：</strong></p><p>321</p><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><hr><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;i);</span><br><span class="line">    </span><br><span class="line">    a=i/<span class="number">100</span>;</span><br><span class="line">    b=(i%<span class="number">100</span>)/<span class="number">10</span>;</span><br><span class="line">    c=i%<span class="number">10</span>;</span><br><span class="line">    m=c*<span class="number">100</span>+b*<span class="number">10</span>+a;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200618112753143.png" alt="image-20200618112753143"></p><hr><h2 id="详解-1"><a href="#详解-1" class="headerlink" title="详解"></a>详解</h2><p>题目要求是：</p><ul><li><p>输入3位的正整数。</p></li><li><p><strong><font color='#2eb82e'>824</font></strong></p></li><li><p>输出格式，逆序的数。</p></li><li><p><strong><font color='#2eb82e'>428</font></strong></p></li></ul><p>首先可以把 <strong><font color='#2eb82e'>824</font></strong> 看作：a,b,c。</p><ul><li>分别代替为百位，十位，个位。</li></ul><p>百位：<code>/100</code> ,可以得到<strong><font color='#2eb82e'>8</font></strong>。</p><p>十位：<code>(%100)/10</code> ，取余得到<strong><font color='#2eb82e'>24</font></strong>，再<code>/10</code>可以得到<strong><font color='#2eb82e'>2</font></strong>。</p><p>个位：<code>%10</code> ,可以得到<strong><font color='#2eb82e'>4</font></strong>.</p><p><strong><font color='#ff9900'>C语言中的 <code>%</code> 作为运算符是用来取余的。</font></strong></p><p>最后输出时，以<code>c*100+b*10+a</code> 格式输出。</p><p>如果使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d%d%d"</span>,a,b,c);</span><br></pre></td></tr></table></figure><p>输入<strong><font color='#2eb82e'>700</font></strong>时，他就会输出<strong><font color='#2eb82e'>007</font></strong>。</p><p>不符合题目要求，所以不可用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个题目我不会，会了之后详解一下。&lt;/p&gt;
&lt;p&gt;程序每次读入一个正三位数，然后输出逆序的数字。&lt;/p&gt;
&lt;p&gt;如321    123&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C练习题" scheme="https://sunrisely.club/tags/C%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>变量,赋值</title>
    <link href="https://sunrisely.club/2020/06/16/%E5%8F%98%E9%87%8F-%E8%B5%8B%E5%80%BC/"/>
    <id>https://sunrisely.club/2020/06/16/%E5%8F%98%E9%87%8F-%E8%B5%8B%E5%80%BC/</id>
    <published>2020-06-16T09:28:16.000Z</published>
    <updated>2020-06-21T02:18:10.402Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下前面所学的变量和赋值知识点。</p><a id="more"></a><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a><strong>变量</strong></h2><p>和数学不同，a=b在数学中表示关系，即a和b的值一样；</p><p>而在程序设计中，a=b表示要求计算机做一个动作：</p><p>将b的值赋给a。</p><p>关系是静态的，而动作是动态的。</p><p>在数学中，a=b和b=a是等价的，而在程序中，两者的意思完全相反。</p><p><strong><font color='#ff9900'>其他数据类型在程序运行期间可能会改变或被赋值，这些称为 变量（variable）。</font></strong></p><hr><h2 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h2><ul><li>&lt;类型名称&gt;&lt;变量名称&gt;=&lt;初始值&gt;；</li><li><code>int price = 0；</code></li><li><code>int amount = 100；</code></li><li>组合变量定义的时候，也可以在这个定义中单独给单个变量赋初值，如：</li><li><code>int price = 0；</code> <code>int amount = 100；</code></li></ul><hr><p><code>int price = 0；</code></p><p>这一行，定义了一个变量，变量的名字是price， 类型是 int，初始值是0。</p><p><strong><font color='#ff9900'>当赋值发生在定义变量的时候。就是变量初始化。</font></strong></p><p>虽然C语言并没有强制要求所有的变量都在定义的地方做初始化，<strong><font color='#ff9900'>但是所有的变量在第一次被使用(出现在赋值运算符的右边)之前应该被赋值一次。</font></strong></p><p>如果没赢进行初始化赋值，会出现其他的数字，这个数字，好像就是例如，int 的取值范围之类。</p><p><strong><font color='#ff9900'>C是一种由类型的语言，所有的变量在使用之前必须定义或声明，所有的变量必须具有确定的数据类型。数据类型表示在变量中可以存放什么样的数据，变量中只能存放指定类型的数据，程序运行过程中也不能改变变量的类型。</font></strong></p><hr><h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a><strong>变量名</strong></h2><p>变量需要一个名字，变量的名字是一种“标识符”，意思是它是用来识别这个和那个的不同的名字。</p><p>标识符有标识符的构造规则，基本的原则是：标识符只能由字母,数字和下划线组成，数字不可以出现在第一个位置上，C语言的关键字(有的地方叫它们保留字)不可以用作标识符。</p><hr><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p><strong><font color='#ff9900'>有些数据类型在程序使用之前已经预先设定好了，在整个程序的运行过程中没有变化，这些称为 常量（constant）。</font></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> change = <span class="number">100</span> - price;</span><br></pre></td></tr></table></figure><ul><li>固定不变的数，是常数。直接写在程序里，我们称作直接量。</li><li>更好的方式，是定义一个常量；</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> AMOUNT = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>const</code>是一个修饰符,加在<code>int</code>的前面，用来给这个变量加上一个<code>const</code> (不变的) 的属性。</p></li><li><p>这个<code>const</code> 的属性表示这个变量的值一旦初始化，就不能再修改了。</p></li></ul><hr><h1 id="关于整形，浮点数"><a href="#关于整形，浮点数" class="headerlink" title="关于整形，浮点数"></a>关于整形，浮点数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(foot + inch / <span class="number">12</span>) * <span class="number">0.3048</span>;</span><br></pre></td></tr></table></figure><p>当没有定义浮点数的时候，以整型 * 整型 时候，结果只能是整数。直接把小数点后，都扔掉了。</p><ul><li><strong><font color='#ff9900'>10和10.0在C中是完全不同的数</font></strong></li><li><strong><font color='#ff9900'>10.0是浮点数</font></strong></li></ul><p><strong>解决方法：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(foot + inch / <span class="number">12.0</span>) * <span class="number">0.3048</span>;</span><br></pre></td></tr></table></figure><p>把12更改为12.0，使他成为浮点数。</p><p><strong><font color='#ff9900'>去进行运算时，C会将整数转换成浮点数，然后进行 浮点数的运算。</font></strong></p><hr><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><ul><li>带小数点的数值，浮点这个词的本意就是指小数点是浮动的，是计算机内部表达非整数(包含分数和无理数) 的一种方式。</li><li>另一种方式交定点数，不过在C语言中不会遇到定点数。<strong><font color='#ff9900'>人们借用浮点数这个词来表达所以的带小数点的数。</font></strong></li></ul><hr><h2 id="变量在-printf-和-scanf-中的使用"><a href="#变量在-printf-和-scanf-中的使用" class="headerlink" title="变量在 printf 和 scanf 中的使用"></a>变量在 <code>printf</code> 和 <code>scanf</code> 中的使用</h2><p>整数</p><ul><li><code>int</code></li><li><code>printf(&quot;%d&quot;,.....)</code></li><li><code>scanf(&quot;%d&quot;,.....)</code></li></ul><p>带小数点的数</p><ul><li><code>float</code> <strong><font color="#8fd3f4">单精度浮点数 </font></strong></li><li><code>double</code>  <strong><font color="#8fd3f4">双精度浮点数 </font></strong></li><li><code>printf(&quot;%f&quot;,.....)</code></li><li><code>scanf(&quot;%lf&quot;,.....)</code></li></ul><p><strong><font color='#ff9900'>C语言中的 <code>%</code> 作为运算符是用来取余的。</font></strong></p><p><strong><font color='#ff9900'><code>%</code>表示取两个数相除以后的余数。</font></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理一下前面所学的变量和赋值知识点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C:基础程序详解</title>
    <link href="https://sunrisely.club/2020/06/03/C-%E8%AE%A1%E7%AE%97/"/>
    <id>https://sunrisely.club/2020/06/03/C-%E8%AE%A1%E7%AE%97/</id>
    <published>2020-06-03T07:01:05.000Z</published>
    <updated>2020-06-16T08:19:55.496Z</updated>
    
    <content type="html"><![CDATA[<p> C程序的结构示例，基础程序结构详解。</p><a id="more"></a><p><strong><font color='#ff9900'>典型C程序结构 </font></strong></p><hr><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/c-primer%20plus-6.jpg" style="zoom:80%;" ><hr><p><strong><font color='#ff9900'>first源码：</font></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>　<span class="meta-string">&lt;stdio.h&gt; </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> num;　</span><br><span class="line">num = <span class="number">1</span>;　</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"I am a simple "</span>);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"computer.\n"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"My　favorite　number　is　%d　because　it　is　first.\n"</span>,num);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span>　<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>　<span class="meta-string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>stdio.h</code> 是C编译器软件包的标准部分，它提供键盘输入和屏幕输出的支持。</p><p>圆括号表明 <code>main()</code> 是一个函数名。<code>int</code> 表明<code>main()</code>函数返回一个整数，<code>void</code> 表明<code>main()</code> 不带任何参数。</p><hr><h2 id="include指令和头文件"><a href="#include指令和头文件" class="headerlink" title="#include指令和头文件"></a><strong>#include指令和头文件</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span></span></span><br></pre></td></tr></table></figure><p> 这行代码是一条C预处理器指令</p><p> 在C程序顶部的信息集合被称为头文件（header）</p><ul><li>头文件中可以定义一些常量，或者指明函数名以及如何使用它们。</li><li>头文件帮助编译器把你的程序正确地组合在一起。</li></ul><p>特定C实现的文档中应该包含对C库函数的说明。</p><p>这些说明确定了使用哪些函数需要包含哪些头文件。</p><p>要使用 <code>printf()</code> 函数，必须包含 <code>stdio.h</code> 头文件。</p><p>每次用到库函数，都会用 <code>#include</code> 指令包含<strong><font color='#ff9900'> ANSI/ISO</font></strong>标准指定的头文件。</p><hr><h2 id="main-函数"><a href="#main-函数" class="headerlink" title="main()函数"></a><strong>main()函数</strong></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>C程序一定从 <code>main()</code> 函数开始执行。</p><p><code>main()</code> 函数必须是开始的函数。</p><p>圆括号用于识别 <code>main()</code> 是一个函数。</p><p><code>int</code> 是 <code>main()</code> 函数的返回类型。</p><p>这表明 <code>main()</code> 函数返回的值是整数，返回给操作系统。</p><p>通常，函数名后面的圆括号中包含一些传入函数的信息。</p><hr><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><strong><font color='#ff9900'>/* </font></strong> 一个简单的程序 <strong><font color='#ff9900'> * /</font></strong>   </p><ul><li><strong><font color='#ff9900'>/ *  * /</font></strong>   多行注释</li></ul><p><strong><font color='#ff9900'>// </font></strong> 一个简单的程序    </p><ul><li><strong><font color='#ff9900'>//</font></strong>    单行注释</li></ul><hr><h2 id="花括号、函数体和块"><a href="#花括号、函数体和块" class="headerlink" title="花括号、函数体和块"></a>花括号、函数体和块</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">… </span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>花括号把<code>main()</code>函数括起来。</p><p>一般而言，所有的C函数,都使用花括号标记函数体的开始和结束。</p><p>这是规定，不能省略。</p><p>只有花括号<code>（{}）</code>能起这种作用，圆括号<code>（()）</code>和方括号<code>（[]）</code>都不行。</p><p><strong><font color='#ff9900'>花括号还可用于把函数中的多条语句合并为一个单元或块。</font></strong></p><hr><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num;</span><br></pre></td></tr></table></figure><p><code>int</code> 是一种数据类型。</p><p>其一，在函数中有一个名为 <code>num</code> 的变量（variable）。</p><p>其二，<code>int</code> 表明 <code>num</code> 是一个整数（即，没有小数点或小数部分的数）。</p><p><code>int</code> 是C语言的一个关键字，表示一种基本的C语言数据类型。</p><p>关键字是语言定义的单词，不能做其他用途。例如，不能用 <code>int</code> 作为函数名和变名。</p><p>示例中的 <code>num</code> 是一个标识符，也就一个变量、函数或其他实体的名称。</p><p>在C语言中，所有变量都必须先声明才能使用。</p><p>这意味着必须列出程序中用到的所有变量名及其类型。</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>C 语言可以处理多种类型的数据，如整数、字符和浮点数。</p><p>把变量声明为整型或字符类型，计算机才能正确地储存、读取和解释数据。</p><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>给变量命名时要使用有意义的变量名或标识符</p><p>（如，程序中需要一个变量数羊，该变量名应该是sheep_count而不是x3）。</p><p>如果变量名无法清楚地表达自身的用途，可在注释中进一步说明。</p><p>这是一种良好的编程习惯和编程技巧。</p><p>C语言的名称区分大小写，即把一个字母的大写和小写视为两个不同的字符。</p><p>因此，stars和Stars、STARS都不同。</p><p>一定要声明变量</p><p>把所有的变量放在一处，方便读者查找和理解程序的用途。</p><hr><h2 id="printf-函数"><a href="#printf-函数" class="headerlink" title="printf()函数"></a>printf()函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"I am a simple "</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"computer.\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"My favorite number is %d because it is first.\n"</span>, num);</span><br></pre></td></tr></table></figure><p>上面的第1行把 I am a simple 传递给 <code>printf()</code> 函数。</p><p>该信息被称为参数，是函数的实际参数。</p><p><code>printf()</code> 函数会查看双引号中的内容，并将其打印在屏幕上。</p><p>括号里面的运行完后，控制权为 <code>printf()</code> ,他的上一级是 <code>main()</code> 函数</p><p>函数执行结束后，控制权被返回至主调函数（calling function），然后是 <code>main()</code> 。</p><h3 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h3><p><strong>/n 是换行符</strong></p><p>对于 <code>printf()</code> 而言，它的意思是“在下一行的最左边开始新的一行”。</p><p>换行符是一个转义序列。转义序列用于代表难以表示或无法输入的字符。</p><p><code>\t</code> 代表Tab键，<code>\b</code> 代表Backspace键（退格键）。每个转义序列都以反斜杠字符（\）开始。</p><h3 id="d"><a href="#d" class="headerlink" title="%d"></a><strong>%d</strong></h3><p><code>%d</code>  相当于是一个占位符，其作用是指明输出 <code>num</code> 值的位置</p><p>%   提醒程序，要在该处打印一个变量，d表明把变量作为十进制整数打印。</p><p>printf() 函数名中的 f 提醒用户，这是一种格式化打印函数。</p><hr><h2 id="return语句"><a href="#return语句" class="headerlink" title="return语句"></a>return语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><code>int main(void)</code> 中的 <code>int</code> 表明 <code>main()</code> 函数应返回一个整数。</p><p>有返回值的 C 函数要有 <code>return</code> 语句。</p><p>该语句以 <code>return</code> 关键字开始，后面是待返回的值，并以分号结尾。</p><p>如果遗漏 <code>main()</code> 函数中的 <code>return</code> 语句，程序在运行至最外面的右花括号（ } ）时会返回0。</p><p>因此，可以省略 <code>main()</code> 函数末尾的 <code>return</code> 语句。但是，不要在其他有返回值的函数中漏掉它。</p><p><strong><font color='#ff9900'>可以省略，但没必要。</font></strong></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; C程序的结构示例，基础程序结构详解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>博客常用字颜色</title>
    <link href="https://sunrisely.club/2020/06/03/%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E5%AD%97%E9%A2%9C%E8%89%B2/"/>
    <id>https://sunrisely.club/2020/06/03/%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E5%AD%97%E9%A2%9C%E8%89%B2/</id>
    <published>2020-06-02T23:48:46.000Z</published>
    <updated>2020-06-22T00:38:29.360Z</updated>
    
    <content type="html"><![CDATA[<p>在博文的使用中，经常会遇到大边幅同一个色调，关键词不能区分，列举下面几种颜色，进行使用，易区分。</p><a id="more"></a><hr><h1 id="颜色名列表"><a href="#颜色名列表" class="headerlink" title="颜色名列表"></a><a href="http://www.w3school.com.cn/tags/html_ref_colornames.asp" target="_blank" rel="noopener">颜色名列表</a></h1><h2 id="绿色-green"><a href="#绿色-green" class="headerlink" title="绿色-green"></a><strong><font color='#2eb82e'>绿色-green</font></strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**&lt;font color&#x3D;&#39;#2eb82e&#39;&gt;&lt;&#x2F;font&gt;**</span><br></pre></td></tr></table></figure><hr><h2 id="橙色–orange"><a href="#橙色–orange" class="headerlink" title="橙色–orange"></a><font color='#ff9900'><strong>橙色–orange</strong></font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**&lt;font color&#x3D;&#39;#ff9900&#39;&gt;&lt;&#x2F;font&gt;**</span><br></pre></td></tr></table></figure><hr><h2 id="淡黄色"><a href="#淡黄色" class="headerlink" title="淡黄色"></a><font color="#f6d365"><strong>淡黄色</strong></font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**&lt;font color&#x3D;&quot;#f6d365&quot;&gt;&lt;&#x2F;font&gt;**</span><br></pre></td></tr></table></figure><hr><h2 id="蓝色-blue"><a href="#蓝色-blue" class="headerlink" title="蓝色-blue"></a><font color='#1a75ff'><strong>蓝色-blue</strong></font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**&lt;font color&#x3D;&#39;#1a75ff&#39;&gt; &lt;&#x2F;font&gt;**</span><br></pre></td></tr></table></figure><hr><h2 id="浅蓝色"><a href="#浅蓝色" class="headerlink" title="浅蓝色"></a><font color="#8fd3f4"><strong>浅蓝色</strong></font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**&lt;font color&#x3D;&quot;#8fd3f4&quot;&gt; &lt;&#x2F;font&gt;**</span><br></pre></td></tr></table></figure><hr><h2 id="紫色-purple"><a href="#紫色-purple" class="headerlink" title="紫色-purple"></a><font color='#8a00e6'><strong>紫色-purple</strong></font></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**&lt;font color&#x3D;&#39;#8a00e6&#39;&gt; &lt;&#x2F;font&gt;**</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在博文的使用中，经常会遇到大边幅同一个色调，关键词不能区分，列举下面几种颜色，进行使用，易区分。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blog" scheme="https://sunrisely.club/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>C:C语言的精神及程序结构</title>
    <link href="https://sunrisely.club/2020/06/01/C-C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%B2%BE%E7%A5%9E/"/>
    <id>https://sunrisely.club/2020/06/01/C-C%E8%AF%AD%E8%A8%80%E7%9A%84%E7%B2%BE%E7%A5%9E/</id>
    <published>2020-06-01T14:11:48.000Z</published>
    <updated>2020-06-17T04:47:09.864Z</updated>
    
    <content type="html"><![CDATA[<p>学习一门语言先要了解他，明白他的原理。</p><p>这一篇文章主要是写计算机语言的原理，和C的精神。编程的主要步骤。</p><a id="more"></a><h1 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h1><ul><li>程序是用特殊的编程语言写出来表达如何解决问题的。</li><li>不是用编程语言来和计算机交谈，而是描述要求它如何做事情的过程或方法。</li></ul><hr><p><strong>算法：</strong></p><ul><li>我们要让计算机做计算，就需要像这样找出计算的步骤，然后用编程语言写出来</li><li>计算机做的所有的事情都叫做计算</li><li>计算的步骤就是算法</li></ul><hr><p><strong>程序的执行：</strong></p><p>解释：借助一个程序，那个程序能试图理解你的程序，然后按照你的要求执行</p><p>编译：借助一个成团关系，就像一个翻译，把你的程序翻译成计算机真正能懂的语言——机器语言——写的程序，然后，这个机器语言写的程序就能直接执行了。</p><hr><p><strong>解释语言VS编译语言</strong></p><ul><li>语言本无编译/解释之分</li><li>常用的执行方式而已</li><li>解释性语言有特殊的计算能力</li><li>编译型语言优缺点的运算性能</li></ul><hr><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/1.png" alt="1" style="zoom: 50%;" /><hr><h1 id="C的精神"><a href="#C的精神" class="headerlink" title="C的精神"></a>C的精神</h1><p><strong>C的精神：</strong></p><ul><li>信任程序员；</li><li>不要妨碍程序员做需要做的事；</li><li>保持语言精练简单；</li><li>只提供一种方法执行一项操作；</li><li>让程序运行更快，即使不能保证其可移植性。</li></ul><p>在最后一点上，标准委员会的用意是：<strong><font color='#ff9900'>作为实现，应该针对目标计算机来定义最合适的某特定操作，而不是 <u>强加一个抽象</u>、<u>统一的定义</u>。在学习C语言过程中，许多方面都反映了这一哲学思想。 </font></strong></p><hr><p>C是编译型语言。C编译器和链接器是把C语言源代码转换成可执行代码的程序。</p><p><strong>C的哲学：</strong></p><ol><li>轻装上阵</li></ol><p>函数是C程序的基本模块。</p><hr><p><strong>编程步骤:</strong></p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/clip_image002.png" alt="clip_image002" style="zoom:80%;" /><p><strong>编程的7个步骤：</strong></p><p>在动手写程序之前，要在脑中有清晰的思路。想要程序去做什么首先自己要明确自己想做什么，思考你的程序需要哪些信息，要进行哪些计算和控制，以及程序应该要报告什么信息。在这一步骤中，不涉及具体的计算机语言，应该用一般 <strong><font color='#ff9900'>术语</font></strong> 来描述问题。</p><hr><p><strong>程序结构：</strong></p><ul><li><p>程序由一个或多个函数组成，必须有 main() 函数。</p></li><li><p>函数由函数头和函数体组成。</p></li><li><p>函数头包括函数名、传入该函数的信息类型和函数的返回类型。</p></li><li><p>通过函数名后的圆括号可识别出函数，圆括号里可能为空，可能有参数。</p></li><li><p>函数体被花括号括起来，由一系列语句、声明组成。</p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/3.png" alt="3" style="zoom:67%;" /></li></ul><hr><p><strong>程序可读性：</strong></p><ul><li>选择有意义的函数名和写注释。</li><li>多使用空行能提高程序的可读性。</li><li>每条语句各占一行。</li><li>分号告诉编译器一条语句在哪里结束、下一条语句在哪里开始。<img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/3 .png" alt="3 " style="zoom:80%;" /></li></ul><hr><p><strong>严格规定：</strong></p><ul><li><strong><font color='#ff9900'> 程序员要具备抽象和逻辑的思维，并谨慎地处理细节问题。</font></strong></li><li><strong><font color='#ff9900'>编译器不允许这样，对它而言，几乎正确仍然是错误。</font></strong></li></ul><hr><p><strong><font color="#8fd3f4">独学而无友，则孤陋而寡闻。</font></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习一门语言先要了解他，明白他的原理。&lt;/p&gt;
&lt;p&gt;这一篇文章主要是写计算机语言的原理，和C的精神。编程的主要步骤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言自学攻略</title>
    <link href="https://sunrisely.club/2020/06/01/C%E8%AF%AD%E8%A8%80%E8%87%AA%E5%AD%A6%E6%94%BB%E7%95%A5/"/>
    <id>https://sunrisely.club/2020/06/01/C%E8%AF%AD%E8%A8%80%E8%87%AA%E5%AD%A6%E6%94%BB%E7%95%A5/</id>
    <published>2020-06-01T00:26:21.000Z</published>
    <updated>2020-06-05T02:47:51.659Z</updated>
    
    <content type="html"><![CDATA[<p>我目前是自学C语言，从头开始学起，来写一份我的自学攻略。</p><a id="more"></a><hr><p>我是按照<strong><font color='#ff9900'>陈越姥姥 </font></strong> <a href="https://weibo.com/ttarticle/p/show?id=2309404469829309432076&u=2826785055&m=4470881575738933&cu=5065615876&ru=2826785055&rm=4469829308400752" target="_blank" rel="noopener">C语言自学攻略</a> ，作为大纲进行学习的。可以在微博搜索关注到她，也是非常厉害浙江大学的教授。</p><p>首先在MOOC 找到<strong>浙江大学翁恺老师开设的“程序设计入门——C语言</strong> ，翁凯老师讲的特别好，从基础开始讲起，初学者也不会听不懂。学习完后，可以学习进阶课程。</p><p>平常刷题可以通过“<strong><a href="https://pintia.cn/problem-sets?tab=0" target="_blank" rel="noopener">拼题A</a></strong>” 来刷题，进行练习，检验自己的学习程度。我目前从头在开始，一些基础知识还要巩固完善。目前进度：<img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200603224121869.png" alt="image-20200603224121869"></p><p>我还有一本C语言书，C primer。这本书很好，但是感觉讲的特别详细，前面不会用到的一些知识点，也是会给你说明清楚，初学看着的话可能有点云里雾里的。。。。</p><hr><p>目前就这些吧，详情请看<strong><font color='#ff9900'>陈越姥姥 </font></strong> <a href="https://weibo.com/ttarticle/p/show?id=2309404469829309432076&u=2826785055&m=4470881575738933&cu=5065615876&ru=2826785055&rm=4469829308400752" target="_blank" rel="noopener">C语言自学攻略</a> ，可以点击跳转链接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我目前是自学C语言，从头开始学起，来写一份我的自学攻略。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C" scheme="https://sunrisely.club/categories/C/"/>
    
    
      <category term="C" scheme="https://sunrisely.club/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的美化之路</title>
    <link href="https://sunrisely.club/2020/05/30/HEXO%E7%9A%84%E7%BE%8E%E5%8C%96%E4%B9%8B%E8%B7%AF/"/>
    <id>https://sunrisely.club/2020/05/30/HEXO%E7%9A%84%E7%BE%8E%E5%8C%96%E4%B9%8B%E8%B7%AF/</id>
    <published>2020-05-30T13:56:21.000Z</published>
    <updated>2020-06-03T00:07:09.555Z</updated>
    
    <content type="html"><![CDATA[<p>目前正在学习使用GitHub的Page服务，搭建博客，记录所学过程！</p><p>使用的是Hexo框架部署，第一次使用难免遇到许多问题，写篇博文，把其中的过程，都记录下来。此篇记录美化功能—-好看是第一生产力！</p><p>我使用的是Next主题，Must样式。</p><a id="more"></a><hr><h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><h2 id="基础样式"><a href="#基础样式" class="headerlink" title="基础样式"></a>基础样式</h2><h3 id="下载Next主题，并更改样式"><a href="#下载Next主题，并更改样式" class="headerlink" title="下载Next主题，并更改样式"></a>下载Next主题，并更改样式</h3><p>打开终端，切换到Hexo根目录底下如 <code>G:\blog\sunrisevip</code> 使用<strong>git</strong> 进行克隆</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd G:\blog\sunrisevip  //这是我路径，替换为自己</span><br><span class="line"></span><br><span class="line">git clone https://github.com/next<span class="literal">-theme</span>/hexo<span class="literal">-theme</span><span class="literal">-next</span> themes/next</span><br></pre></td></tr></table></figure><p>打开站点文件 <code>hexo / _config.yml</code> 找到 <code>theme</code> 然后将其值更改为 <code>true</code> (或另一个主题目录名称)</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>现在可以再进行验证，终端输入 <code>hexo s</code> 进行部署会出现</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:<span class="number">4000</span> . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>表示已经本地部署成功，输入链接 <code>http://localhost:4000</code> 进行访问验证。</p><p>成功出现样式后，可以在主题配置文件下 <code>next/_config.yml</code> ，进行样式更改，支持四种方案。取消掉 <strong>#</strong> 进行更改。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><hr><h3 id="配置站点图标"><a href="#配置站点图标" class="headerlink" title="配置站点图标"></a>配置站点图标</h3><p>站点图标例如那个可达鸭：</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200531102041860.png" alt="image-20200531102041860"></p><p>图标存放在<code>hexo-site/source/images/</code> ，然后在<code>hexo / _config.yml</code> 中的 <code>favicon</code> 样式中进行修改和重命名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png     //这一行修改</span><br><span class="line">  medium: /images/favicon-32x32-next.png   //这一行修改</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  android_manifest: /images/manifest.json</span><br><span class="line">  ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure><p><strong>favicon</strong> 图标，需经过修改,提供个在线制作网址</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http://www.bitbug.net/</span></span><br></pre></td></tr></table></figure><h3 id="配置头像"><a href="#配置头像" class="headerlink" title="配置头像"></a>配置头像</h3><p>默认情况下，Next主题，侧边栏中不显示头像，通过主题配置文件<code>next/_config.yml</code>下 <code>avater</code> 样式进行修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">url: <span class="regexp">/images/</span>avatar.gif    <span class="comment">//这一行替换图片路径</span></span><br><span class="line">rounded: <span class="literal">true</span><span class="comment">//没搞懂</span></span><br><span class="line"> rotated: <span class="literal">true</span><span class="comment">//头像将在鼠标悬停时旋转。false关闭</span></span><br></pre></td></tr></table></figure><iframe height=194 width=382 src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/xuanzhuan.gif" ></iframe><h2 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h2><p> 侧边栏样式默认情况下侧边栏仅显示在博文中，位于左侧，可以在<code>next/_config.yml</code>中<code>sidebar</code> 样式中进行修改。</p><h3 id="更改边栏位置"><a href="#更改边栏位置" class="headerlink" title="更改边栏位置"></a>更改边栏位置</h3><p> <code>left</code>→屏幕左侧           <code>right</code>→屏幕左侧</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  position: left</span><br><span class="line">  #position: right</span><br></pre></td></tr></table></figure><h3 id="更改边栏宽度"><a href="#更改边栏宽度" class="headerlink" title="更改边栏宽度"></a>更改边栏宽度</h3><p> <code>sidebar.width</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  width: <span class="number">300</span></span><br></pre></td></tr></table></figure><h3 id="更改侧边栏样式"><a href="#更改侧边栏样式" class="headerlink" title="更改侧边栏样式"></a>更改侧边栏样式</h3><p>设置条件，在该条件<code>sidebar.display</code>下边栏将通过编辑值显示，该值可以是以下之一：</p><ul><li><strong><code>post</code></strong> →仅在具有索引的帖子中显示侧边栏。</li><li><code>always</code> →在所有页面中显示侧边栏。</li><li><code>hide</code> →将其隐藏在所有页面中（但可以由用户手动打开）。</li><li><code>remove</code> →完全移除侧边栏。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">  display: post</span><br><span class="line">  #display: always</span><br><span class="line">  #display: hide</span><br><span class="line">  #display: remove</span><br></pre></td></tr></table></figure><p>还有几个值，仅支持不同主题样式，不常用没写。</p><h3 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h3><p>指定的链接必须具有完整的URL路径（永久链接）。 可以更改社交链接图标</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200531123136810.png" alt="image-20200531123136810"></p><p>编辑<code>next/_config.yml</code>中的<code>social</code>部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;yourname || fab fa-github</span><br><span class="line">  E-Mail: mailto:yourname@gmail.com || fa fa-envelope</span><br><span class="line">  Weibo: https:&#x2F;&#x2F;weibo.com&#x2F;yourname || fab fa-weibo</span><br><span class="line">  Google: https:&#x2F;&#x2F;plus.google.com&#x2F;yourname || fab fa-google</span><br><span class="line">  Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;yourname || fab fa-twitter</span><br></pre></td></tr></table></figure><p>后面中的<code>fab fa-github</code> 是图标样式，可以在下列网站中选取样式,进行替换</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://fontawesome.com/icons?d=gallery</span><br></pre></td></tr></table></figure><h3 id="侧栏博客卷"><a href="#侧栏博客卷" class="headerlink" title="侧栏博客卷"></a>侧栏博客卷</h3><p>可以在Next的侧边栏中添加博客卷。</p><p>设定<code>icon</code> 值图标进行更换</p><p>设定<code>title</code>值名称进行更换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">links_settings:</span><br><span class="line">  icon: fa fa-link</span><br><span class="line">  title: sunrise</span><br></pre></td></tr></table></figure><p>设定<code>links</code>值添加喜欢的链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">links:</span><br><span class="line">  Title1: http:<span class="comment">//example1.com/</span></span><br><span class="line">  Title2: http:<span class="comment">//example2.com/</span></span><br></pre></td></tr></table></figure><h2 id="发布帖子"><a href="#发布帖子" class="headerlink" title="发布帖子"></a>发布帖子</h2><h3 id="标签图标"><a href="#标签图标" class="headerlink" title="标签图标"></a>标签图标</h3><p>默认情况下，帖子底部的标签左侧左侧有一个符号＃。</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200531125917579.png" alt="image-20200531125917579"></p><p>喜欢图标而不是符号，<code>next/_config.yml</code> 中更改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag_icon: <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="打赏"><a href="#打赏" class="headerlink" title="打赏"></a>打赏</h3><p>可以在每篇文章底下添加支付码，以便收到打赏。图片放到主题文件下<code>next\source\images</code> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Reward (Donate)</span><br><span class="line">reward_settings:</span><br><span class="line">   enable: <span class="literal">true</span></span><br><span class="line">  animation: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">reward:</span><br><span class="line">  wechatpay: <span class="regexp">/images/</span>wechatpay.png</span><br><span class="line">  alipay: <span class="regexp">/images/</span>alipay.png</span><br><span class="line">  bitcoin: <span class="regexp">/images/</span>bitcoin.png</span><br></pre></td></tr></table></figure><h3 id="订阅链接"><a href="#订阅链接" class="headerlink" title="订阅链接"></a>订阅链接</h3><p> Follow me</p><p>根据自己选择开启，或替换地址，图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Subscribe through Telegram Channel, Twitter, etc.</span><br><span class="line"># Usage: &#96;Key: permalink || icon&#96; (Font Awesome)</span><br><span class="line">follow_me:</span><br><span class="line">  #Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;username || fab fa-twitter</span><br><span class="line">  #Telegram: https:&#x2F;&#x2F;t.me&#x2F;channel_name || fab fa-telegram</span><br><span class="line">  #WeChat: &#x2F;images&#x2F;wechat_channel.jpg || fab fa-weixin</span><br><span class="line">  #RSS: &#x2F;atom.xml || fa fa-rss</span><br></pre></td></tr></table></figure><h2 id="自定义页面"><a href="#自定义页面" class="headerlink" title="自定义页面"></a>自定义页面</h2><h3 id="添加自定义页面"><a href="#添加自定义页面" class="headerlink" title="添加自定义页面"></a>添加自定义页面</h3><p>在Hexo网站目录，创建一个新的页面</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your<span class="literal">-hexo</span><span class="literal">-site</span></span><br><span class="line">hexo new page custom_name</span><br></pre></td></tr></table></figure><p>设置前值(官方文档这样叫的)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: custom_name</span><br><span class="line">date: <span class="number">2014</span><span class="number">-12</span><span class="number">-22</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">04</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加<code>custom_name</code>到<code>menu</code>编辑主题的配置文件，如添加<code>about</code>页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: <span class="regexp">/ || fa fa-home</span></span><br><span class="line"><span class="regexp">  archives: /</span>archives/ || fa fa-archive</span><br><span class="line">  about: <span class="regexp">/about/</span> || fa fa-user</span><br></pre></td></tr></table></figure><h2 id="其他一些小美化"><a href="#其他一些小美化" class="headerlink" title="其他一些小美化"></a>其他一些小美化</h2><h3 id="修改标签样式"><a href="#修改标签样式" class="headerlink" title="修改标签样式"></a>修改标签样式</h3><p>原标签样式，特别小，颜色比较淡</p><p>打开<code>themes/next/layout/page.njk</code> </p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200531170710763.png" alt="image-20200531170710763"></p><p>把<code>tagcloud</code> 其中的值修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; tagcloud(&#123;min_font: 20,</span><br><span class="line">max_font: 30,</span><br><span class="line">amount: 300,</span><br><span class="line">color: true,</span><br><span class="line">start_color: &#39;#555&#39;,</span><br><span class="line">end_color: &#39;#111&#39;&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure><p>现效果：</p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200531170956788.png" alt="image-20200531170956788" style="zoom: 67%;" /><hr><h3 id="更改标签图标"><a href="#更改标签图标" class="headerlink" title="更改标签图标"></a>更改标签图标</h3><p>修改<code>Blog\themes\next\layout\_macro\post.njk</code> 中的<code>tag_indicate</code> 值进行替换<img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200531181142014.png" alt="image-20200531181142014"></p><p>最后效果图：</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200531181233424.png" alt="image-20200531181233424"></p><hr><h3 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h3><p>文章顶部浏览进度条修改<code>reading_progress</code> 样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reading_progress:    #阅读进度条</span><br><span class="line">  enable: true#false关闭</span><br><span class="line">  # Available values: top | bottom</span><br><span class="line">  position: top</span><br><span class="line">  #color: "#37c6c0"   更换颜色</span><br><span class="line">  color: <span class="string">"#8fd3f4"</span></span><br><span class="line">  height: <span class="number">3</span>px</span><br></pre></td></tr></table></figure><p>效果图：<img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200531194948741.png" alt="image-20200531194948741" style="zoom:80%;" /></p><hr><h3 id="增加书签效果"><a href="#增加书签效果" class="headerlink" title="增加书签效果"></a>增加书签效果</h3><p>在博文右上方出现书签角标，更改<code>bookmark</code> 样式，还可更改其颜色</p><p>下次打开会在当前页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bookmark:</span><br><span class="line">  enable: true</span><br><span class="line">  color: &quot;#f6d365&quot;</span><br><span class="line">  save: auto</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://photo-1300227012.cos.ap-nanjing.myqcloud.com/image-20200531195312969.png" alt="image-20200531195312969"></p><hr><h3 id="代码块高亮"><a href="#代码块高亮" class="headerlink" title="代码块高亮"></a>代码块高亮</h3><p>选取喜欢的代码块主题，进行<code>codeblock</code>样式更改</p><p><code>theme</code>：</p><p><code>light</code>→明亮主题模式下</p><p><code>dark</code>→暗模式下</p><p>在以下网址进行选择</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line"><span class="attribute">https://github.com/highlightjs/highlight.js/tree/master/src/styles</span></span><br></pre></td></tr></table></figure><hr><p> <code>copy_button</code> ：</p><p>开启代码复制功能</p><p><code>style</code> ：</p><p>更改代码框样式</p><p><code>flat</code> →扁平化风格</p><p><code>mac</code> →Mac样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  theme:</span><br><span class="line">    light: tomorrow-night-eighties</span><br><span class="line">    dark: tomorrow-night-blue</span><br><span class="line"></span><br><span class="line">  copy_button:</span><br><span class="line">    enable: <span class="literal">true</span></span><br><span class="line">    show_result: <span class="literal">true</span></span><br><span class="line">    style: flat</span><br></pre></td></tr></table></figure><hr><p>未完待续吧，之后还有其他优化，会再进行添加。😁😁😁</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前正在学习使用GitHub的Page服务，搭建博客，记录所学过程！&lt;/p&gt;
&lt;p&gt;使用的是Hexo框架部署，第一次使用难免遇到许多问题，写篇博文，把其中的过程，都记录下来。此篇记录美化功能—-好看是第一生产力！&lt;/p&gt;
&lt;p&gt;我使用的是Next主题，Must样式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://sunrisely.club/categories/Hexo/"/>
    
    
      <category term="blog" scheme="https://sunrisely.club/tags/blog/"/>
    
      <category term="美化" scheme="https://sunrisely.club/tags/%E7%BE%8E%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://sunrisely.club/2020/05/26/hello-world/"/>
    <id>https://sunrisely.club/2020/05/26/hello-world/</id>
    <published>2020-05-26T11:41:00.710Z</published>
    <updated>2020-06-04T00:25:13.098Z</updated>
    
    <content type="html"><![CDATA[<p>**<font color='#ff9900'><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>**</p><p><strong></font></strong></p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;**&lt;font color=&#39;#ff9900&#39;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;**&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
